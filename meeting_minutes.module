<?php
/**
 * @file
 * Code for the Meeting Minutes feature.
 */

include_once 'meeting_minutes.features.inc';

/**
 * Implements hook_permission().
 */
function meeting_minutes_permission() {
  return array(
    'Edit CD' => array(
      'title' => t('Create/Edit Meeting Minutes - Collections Development'),
    ),
    'Edit ISC' => array(
      'title' => t('Create/Edit Meeting Minutes - Instructional Services Committee'),
    ),
    'Edit LCSWG' => array(
      'title' => t('Create/Edit Meeting Minutes - John B. McNair Learning Commons Services'),
    ),
    'Edit LB' => array(
      'title' => t('Create/Edit Meeting Minutes - Library Board'),
    ),
    'Edit PSC' => array(
      'title' => t('Create/Edit Meeting Minutes - Public Service Committee'),
    ),
    'Edit SAC' => array(
      'title' => t('Create/Edit Meeting Minutes - Student Advisory Council'),
    ),
    'Edit STDC' => array(
      'title' => t('Create/Edit Meeting Minutes - Staff Training & Development Committee'),
    ),
    'Edit WERC' => array(
      'title' => t('Create/Edit Meeting Minutes - Web & Electronic Resources Committee'),
    ),
    'Edit WRC' => array(
      'title' => t('Create/Edit Meeting Minutes - Website Review Committee'),
    ),
    'View CD' => array(
      'title' => t('View Meeting Minutes - Collections Development'),
    ),
    'View ISC' => array(
      'title' => t('View Meeting Minutes - Instructional Services Committee'),
    ),
    'View LCSWG' => array(
      'title' => t('View Meeting Minutes - John B. McNair Learning Commons Services'),
    ),
    'View LB' => array(
      'title' => t('View Meeting Minutes - Library Board'),
    ),
    'View PSC' => array(
      'title' => t('View Meeting Minutes - Public Service Committee'),
    ),
    'View SAC' => array(
      'title' => t('View Meeting Minutes - Student Advisory Council'),
    ),
    'View STDC' => array(
      'title' => t('View Meeting Minutes - Staff Training & Development Committee'),
    ),
    'View WERC' => array(
      'title' => t('View Meeting Minutes - Web & Electronic Resources Committee'),
    ),
    'View WRC' => array(
      'title' => t('View Meeting Minutes - Website Review Committee'),
    ),
  );
}

/**
 * Sets permissions for each action.
 */
function _minutes_access($node, $op, $account) {
  if ($node == 'meeting_minutes') {
    if (count(_get_permitted_committees('edit')) > 0) {
      return NODE_ACCESS_ALLOW;
    }
  }
  if (isset($node->type) && $node->type == 'meeting_minutes') {
    $language = $node->language;
    $committee = $node->field_committee_or_publication[$language][0]['value'];
    $canView = user_access('View ' . $committee);
    $canAdmin = user_access('Edit ' . $committee);

    switch ($op) {
      case 'view':
        if (!($canView || $canAdmin)) {
          return NODE_ACCESS_DENY;
        }

      break;
      case 'create':
      case 'update':
        if (!$canAdmin) {
          return NODE_ACCESS_DENY;
        }

      break;

      case 'delete':
        return NODE_ACCESS_DENY;

      break;

      default:
        return NODE_ACCESS_IGNORE;

      break;
    }
  }
}

/**
 * Implements hook_node_access() for meeting minutes.
 */
function meeting_minutes_node_access($node, $op, $account) {
  return _minutes_access($node, $op, $account);
}

/**
 * Implements hook_menu() for meeting minutes.
 */
function meeting_minutes_menu() {
  $items['meeting-minutes'] = array(
    'title' => 'Meeting Minutes',
    'page callback' => '_meeting_minutes_page',
    'access callback' => '_access_meeting_minutes_page',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Callback to check whether user can access meeting minutes page.
 */
function _access_meeting_minutes_page() {
  $permissions = array_keys(meeting_minutes_permission());
  foreach ($permissions as $permission) {
    if (user_access($permission)) {
      return true;
    }
  }
  return false;
}

/**
 * Gets committees that user is permitted to view or edit
 */
function _get_permitted_committees($action) {
  $committees = array();
  $permissions = array_keys(meeting_minutes_permission());

  switch ($action) {
    case 'view':
      foreach ($permissions as $permission) {
        if (user_access($permission)) {
          $permission_exploded = explode(' ', $permission);
          $committees[] = $permission_exploded[1];
        }
      }
      return $committees;
    break;

    case 'edit':
      foreach ($permissions as $permission) {
        $permission_exploded = explode(' ', $permission);
        $permission_type = $permission_exploded[0];
        if (user_access($permission) && $permission_type == 'Edit') {
          $committees[] = $permission_exploded[1];
        }
      }
      return $committees;
    break;
  }
}

/**
 * Returns content for meeting minutes page
 */
function _meeting_minutes_page() {
  $filter = implode('+', _get_permitted_committees('view'));
  return views_embed_view('list_meeting_minutes', 'default', $filter);
}

/**
 * Implements hook_form_alter().
 */
function meeting_minutes_form_alter(&$form, $form_state, $form_id) {
  switch($form_id) {
    case 'meeting_minutes_node_form':
      $form['title']['#type'] = 'hidden';
      $form['title']['#default_value'] = 'temp';

      $form['title']['#element_validate'] = array('_title_validate');
      $form['field_special_note']['#element_validate'] = array('_special_note_validate');

      $field_language = $form['field_committee_or_publication']['#language'];
      $options = _revise_committee_options($form['field_committee_or_publication'][$field_language]['#options'], 'edit');
      $form['field_committee_or_publication'][$field_language]['#options'] = $options;


  break;

    case 'views_exposed_form':
      if (isset($form['field_committee_or_publication_value'])) {
        $options = _revise_committee_options($form['field_committee_or_publication_value']['#options'], 'view');
        $form['field_committee_or_publication_value']['#options'] = $options;

        $permitted_committees = _get_permitted_committees('edit');
        $showAddLink = count($permitted_committees) > 0 ? TRUE : FALSE;
        if ($showAddLink) {
          $form['#prefix'] = '<br><p><a href="node/add/meeting-minutes">Upload more minutes</a></p>';
        }
      }
  break;

    default:
    return;
  break;
  }
}

function _special_note_validate($element, &$form_state) {
  $language = $element['#language'];
  $special_note = $element[$language][0]['value']['#value'];

  if ($special_note == '') {
    return;
  }

  if (!preg_match('/^[A-Za-z0-9_-]+$/', $special_note)) {
    form_error($element, t('Special note must only contain alphanumeric characters, dashes, and underscores.'));
  }
  if (count($special_note) > 15) {
    form_error($element, t('Special note must be 15 characters or less.'));
  }
}

function _title_validate($element, &$form_state) {
  $node_exists = $form_state['complete form']['nid']['#value'] != NULL ? TRUE : FALSE;

  if (!$node_exists) {
    $special_note_language = $form_state['complete form']['field_special_note']['#language'];
    $special_note = $form_state['complete form']['field_special_note'][$special_note_language][0]['value']['#value'];

    $committee_language = $form_state['complete form']['field_committee_or_publication']['#language'];
    $committee = $form_state['complete form']['field_committee_or_publication'][$committee_language]['#value'];

    $date_language = $form_state['complete form']['field_date_of_meeting']['#language'];
    $date_string = $form_state['complete form']['field_date_of_meeting'][$date_language][0]['value']['#value']['date'];
    $date_array = date_parse($date_string);
    $date = $date_array['year'] . '-' . sprintf("%02s", $date_array['month']) . '-' . sprintf("%02s", $date_array['day']);

    $title = _generate_node_title($committee, $date, $special_note);

    // Check if title already exists. If so, set form error.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->propertyCondition('type', 'meeting_minutes')
      ->propertyCondition('status', 1)
      ->propertyCondition('title', $title)
      ->range(0, 1)
      ->addMetaData('account', user_load(1)); // Run the query as user 1.
    $result = $query->execute();
    if (isset($result['node'])) {
      if (count($result['node']) > 0) {
          $existing_node_ids = array_keys($result['node']);
          $existing_node_id = $existing_node_ids[0];
        form_error($element, t('Meeting minutes already exist for this committee/date. To add another set of minutes for this committee/date, please enter a Special Note below. Otherwise, <a href="/node/' . $existing_node_id . '/edit">click here to edit existing minutes</a>.'));
      }
    }
  }
}

function _generate_node_title($committee, $date, $special_note) {
  $date_array = explode(' ', $date);
  $new_title = $committee . '-' . $date_array[0];
  if ($special_note != '') {
    $new_title = $new_title . '-' . $special_note;
  }
  return $new_title;
}

/**
 * Removes committee options from select if user does not have permission to view/edit
 */
function _revise_committee_options($options, $action) {
    $committees = _get_permitted_committees($action);
    foreach ($options as $key => $value) {
      if ($key != 'All' && !in_array($key, $committees)) {
        unset($options[$key]);
      }
    }
    return $options;
}

/**
 * Implements hook_node_presave().
 */
function meeting_minutes_node_presave($node) {

  if($node->type == 'meeting_minutes') {
    $language = $node->language;
    $committee = $node->field_committee_or_publication[$language][0]['value'];
    $special_note = isset($node->field_special_note[$language][0]['value']) ? $node->field_special_note[$language][0]['value'] : '';
    $date = $node->field_date_of_meeting[$language][0]['value'];

    // Rename title
    $node->title = _generate_node_title($committee, $date, $special_note);

    // Rename file
    $date_array = explode(' ', $date);
    $new_filename = $committee . '-' . $date_array[0] . '.pdf';
    $fid = $node->field_minutes_file[$language][0]['fid'];
    $source = file_load($fid);
    // Note: $source->filename doesn't always represent the true filename.
    // If the same filename has been uploaded multiple time, Drupal will append a number to the end
    // of the actual file, but will leave the filename attribute the same.
    // Use drupal_basename($source->uri) to get the actual name of the file.
    $new_destination = str_replace(drupal_basename($source->uri), $new_filename, $source->uri);
    $source->filename = $new_filename;
    // Only rename file is it's not already named properly
    if ($source->uri != $new_destination) {
      $result = file_move($source, $new_destination, FILE_EXISTS_RENAME);
    }
  }
}
