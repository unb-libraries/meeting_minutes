<?php
/**
 * @file
 * Code for the Meeting Minutes feature.
 */

include_once 'meeting_minutes.features.inc';

/**
 * Implements hook_permission().
 */
function meeting_minutes_permission() {
  return array(
    'Edit CD' => array(
      'title' => t('Create/Edit Meeting Minutes - Collections Development'),
    ),
    'Edit ISC' => array(
      'title' => t('Create/Edit Meeting Minutes - Instructional Services Committee'),
    ),
    'Edit LCSWG' => array(
      'title' => t('Create/Edit Meeting Minutes - John B. McNair Learning Commons Services'),
    ),
    'Edit LB' => array(
      'title' => t('Create/Edit Meeting Minutes - Library Board'),
    ),
    'Edit PSC' => array(
      'title' => t('Create/Edit Meeting Minutes - Public Service Committee'),
    ),
    'Edit STDC' => array(
      'title' => t('Create/Edit Meeting Minutes - Staff Training & Development Committee'),
    ),
    'Edit WERC' => array(
      'title' => t('Create/Edit Meeting Minutes - Web & Electronic Resources Committee'),
    ),
    'Edit WRC' => array(
      'title' => t('Create/Edit Meeting Minutes - Website Review Committee'),
    ),
    'View CD' => array(
      'title' => t('View Meeting Minutes - Collections Development'),
    ),
    'View ISC' => array(
      'title' => t('View Meeting Minutes - Instructional Services Committee'),
    ),
    'View LCSWG' => array(
      'title' => t('View Meeting Minutes - John B. McNair Learning Commons Services'),
    ),
    'View LB' => array(
      'title' => t('View Meeting Minutes - Library Board'),
    ),
    'View PSC' => array(
      'title' => t('View Meeting Minutes - Public Service Committee'),
    ),
    'View STDC' => array(
      'title' => t('View Meeting Minutes - Staff Training & Development Committee'),
    ),
    'View WERC' => array(
      'title' => t('View Meeting Minutes - Web & Electronic Resources Committee'),
    ),
    'View WRC' => array(
      'title' => t('View Meeting Minutes - Website Review Committee'),
    ),
  );
}

function meeting_minutes_views_pre_view(&$view, &$display_id, &$args) {
  $permitted_committees = _get_permitted_committees('edit');
  $showAddLink = count($permitted_committees) > 0 ? TRUE : FALSE;
  $header = '<div class="view-header">
              <p>Please contact <a href="mailto:jjc@unb.ca">Jeff Carter</a> or the committee chair if there are minutes missing from here.</p>
              <p>Note: In the interests of sharing information as quickly as possible, some committees listed below have agreed to post minutes prior to formal committee acceptance. Please keep this in mind when reviewing them. Library Board minutes are only posted once they have been accepted.</p>';
  if ($showAddLink) {
    $header .= '<p><a href="node/add/meeting-minutes">Upload more minutes</a></p>
            </div>';
  }
  $view->set_item_option($display_id, 'header', 'area', 'content', $header);
}

/**
 * Sets permissions for each action.
 */
function _minutes_access($node, $op, $account) {
  if ($node == 'meeting_minutes') {
    if (count(_get_permitted_committees('edit')) > 0) {
      return NODE_ACCESS_ALLOW;
    }
  }
  if (isset($node->type) && $node->type == 'meeting_minutes') {
    $language = $node->language;
    $committee = $node->field_committee_or_publication[$language][0]['value'];
    $canView = user_access('View ' . $committee);
    $canAdmin = user_access('Edit ' . $committee);

    switch ($op) {
      case 'view':
        if (!($canView || $canAdmin)) {
          return NODE_ACCESS_DENY;
        }

      break;
      case 'create':
      case 'update':
        if (!$canAdmin) {
          return NODE_ACCESS_DENY;
        }

      break;

      case 'delete':
        return NODE_ACCESS_DENY;

      break;

      default:
        return NODE_ACCESS_IGNORE;

      break;
    }
  }
}

/**
 * Implements hook_node_access() for meeting minutes.
 */
function meeting_minutes_node_access($node, $op, $account) {
  return _minutes_access($node, $op, $account);
}

/**
 * Implements hook_menu() for meeting minutes.
 */
function meeting_minutes_menu() {
  $items['meeting-minutes'] = array(
    'title' => 'Meeting Minutes',
    'page callback' => '_meeting_minutes_page',
    'access callback' => '_access_meeting_minutes_page',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Callback to check whether user can access meeting minutes page.
 */
function _access_meeting_minutes_page() {
  $permissions = array_keys(meeting_minutes_permission());
  foreach ($permissions as $permission) {
    if (user_access($permission)) {
      return true;
    }
  }
  return false;
}

/**
 * Gets committees that user is permitted to view or edit
 */
function _get_permitted_committees($action) {
  $committees = array();
  $permissions = array_keys(meeting_minutes_permission());

  switch ($action) {
    case 'view':
      foreach ($permissions as $permission) {
        if (user_access($permission)) {
          $permission_exploded = explode(' ', $permission);
          $committees[] = $permission_exploded[1];
        }
      }
      return $committees;
    break;

    case 'edit':
      foreach ($permissions as $permission) {
        $permission_exploded = explode(' ', $permission);
        $permission_type = $permission_exploded[0];
        if (user_access($permission) && $permission_type == 'Edit') {
          $committees[] = $permission_exploded[1];
        }
      }
      return $committees;
    break;
  }
}

/**
 * Returns content for meeting minutes page
 */
function _meeting_minutes_page() {
  $filter = implode('+', _get_permitted_committees('view'));
  return views_embed_view('list_meeting_minutes', 'default', $filter);
}

/**
 * Implements hook_form_alter().
 */
function meeting_minutes_form_alter(&$form, $form_state, $form_id) {
  switch($form_id) {
    case 'meeting_minutes_node_form':
      $form['title']['#type'] = 'hidden';
      $form['title']['#default_value'] = 'temp';

      $form['field_special_note']['#element_validate'] = array('_special_note_validate');
      $form['field_special_note']['#desctipion'] = '15 characters only, no spaces';

      $field_language = $form['field_committee_or_publication']['#language'];
      $options = _revise_committee_options($form['field_committee_or_publication'][$field_language]['#options'], 'edit');
      $form['field_committee_or_publication'][$field_language]['#options'] = $options;


  break;

    case 'views_exposed_form':
      $options = _revise_committee_options($form['field_committee_or_publication_value']['#options'], 'view');
      $form['field_committee_or_publication_value']['#options'] = $options;
  break;

    default:
    return;
  break;
  }
}

function _special_note_validate($element, &$form_state) {
  $language = $element['#language'];
  $special_note = $element[$language][0]['value']['#value'];

  if (!preg_match('/^[A-Za-z0-9_-]+$/', $special_note)) {
    form_error($element, t('Special note must only contain alphanumeric characters, dashes, and underscores.'));
  }
  if (count($special_note) > 15) {
    form_error($element, t('Special note must be 15 characters or less.'));
  }
}

/**
 * Removes committee options from select if user does not have permission to view/edit
 */
function _revise_committee_options($options, $action) {
    $committees = _get_permitted_committees($action);
    foreach ($options as $key => $value) {
      if ($key != 'All' && !in_array($key, $committees)) {
        unset($options[$key]);
      }
    }
    return $options;
}

/**
 * Implements hook_node_presave().
 */
function meeting_minutes_node_presave($node) {

  if($node->type == 'meeting_minutes') {
    $language = $node->language;
    $committee = $node->field_committee_or_publication[$language][0]['value'];
    $special_note = isset($node->field_special_note[$language][0]['value']) ? $node->field_special_note[$language][0]['value'] : '';
    $date = $node->field_date_of_meeting[$language][0]['value'];
    $date_array = explode(' ', $date);

    // Rename title
    $new_title = $committee . '-' . $date_array[0];
    if ($special_note != '') {
      $new_title = $new_title . "-" . $special_note;
    }
    $node->title = $new_title;

    if ($node->nid == '') {
      // If new node is being created, check if minutes already exist for this committee/date. If so, set message, delete file, and abort node save.
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'meeting_minutes')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_committee_or_publication', 'value', $committee)
        ->fieldCondition('field_date_of_meeting', 'value', $date)
        ->range(0, 1)
        ->addMetaData('account', user_load(1)); // Run the query as user 1.
      $result = $query->execute();
      if (isset($result['node'])) {
        if (count($result['node'])) {
          $file = file_load($node->field_minutes_file[$language][0]['fid']);
          file_delete($file);
          $existing_node_ids = array_keys($result['node']);
          $existing_node_id = $existing_node_ids[0];
          drupal_set_message('Meeting minutes for this committee and date already exist. <a href="/node/' . $existing_node_id . '/edit">Please edit the existing minutes instead.</a>', 'error');
          drupal_goto(current_path());
        }
      }

      // Rename file
      $new_filename = $committee . '-' . $date_array[0] . '.pdf';
      $fid = $node->field_minutes_file[$language][0]['fid'];
      $source = file_load($fid);
      // Note: $source->filename doesn't always represent the true filename.
      // If the same filename has been uploaded multiple time, Drupal will append a number to the end
      // of the actual file, but will leave the filename attribute the same.
      // Use drupal_basename($source->uri) to get the actual name of the file.
      $new_destination = str_replace(drupal_basename($source->uri), $new_filename, $source->uri);
      $source->filename = $new_filename;
      $result = file_move($source, $new_destination, FILE_EXISTS_ERROR);
    }
  }
}
